@using EPiServer.Reference.Commerce.Site.Features.Checkout.Models
@model EPiServer.Reference.Commerce.Site.Features.Checkout.Models.CheckoutViewModel
@{
    Layout = null;
}

<div id="AddressContainer">
@{ Html.RenderPartial("BillingAddress", Model); }

    <input type="hidden" name="shippingAddressIndex" id="ShippingAddressIndex" />
    <a href="#" id="AlternativeAddressButton">@Html.Translate("/Checkout/Shipment/AlternativeAddress")</a><br />

    @for (int index = 0; index < Model.ShippingAddresses.Count(); index++)
    {
        <div class="shipping-address">
        <div class="section-box">
        <button type="button" class="btn btn-default btn--blue remove-shipping-address pull-right clearfix">@Html.Translate("/Shared/Address/RemoveAddress")</button>
        <h4>
        @Html.Translate("/Checkout/Shipment/AlternativeAddress")
        @if (Model.ShippingAddresses.Count > 1)
        {
            @(index + 1)
        }
        </h4>

        </div>

        <div class="row">
        <div class="col-md-6 col-sm-12">
        <div class="jsCheckoutAddress" data-url="@Url.Action("ChangeAddress", "Checkout", new { @node = @Model.StartPage.CheckoutPage })">

        @Html.HiddenFor(model => model.ShippingAddresses[index].Name)
        @Html.HiddenFor(model => model.ShippingAddresses[index].DaytimePhoneNumber)

        @if (HttpContext.Current.User.Identity.IsAuthenticated)
        {
            <div class="form-group">
            @Html.LabelFor(model => model.ShippingAddresses[index].AddressId)
            @Html.DropDownListFor(model => model.ShippingAddresses[index].AddressId,
                            new SelectList(Model.AvailableAddresses, "AddressId", "Name", Model.ShippingAddresses[index].AddressId.HasValue ? Model.ShippingAddresses[index].AddressId.ToString() : string.Empty),
                            new { @class = "form-control jsChangeAddress"})
            </div>
        }

        <div class="row">
        <div class="form-group col-md-6">
        @Html.LabelFor(model => model.ShippingAddresses[index].FirstName)
        @Html.TextBoxFor(model => model.ShippingAddresses[index].FirstName, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ShippingAddresses[index].FirstName)
        </div>

        <div class="form-group col-md-6">
        @Html.LabelFor(model => model.ShippingAddresses[index].LastName)
        @Html.TextBoxFor(model => model.ShippingAddresses[index].LastName, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ShippingAddresses[index].LastName)
        </div>
        </div>

        <div class="form-group">
        @Html.LabelFor(model => model.ShippingAddresses[index].Email)
        @Html.TextBoxFor(model => model.ShippingAddresses[index].Email, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ShippingAddresses[index].Email)
        </div>

        <div class="form-group">
        @Html.LabelFor(model => model.ShippingAddresses[index].Line1)
        @Html.TextBoxFor(model => model.ShippingAddresses[index].Line1, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ShippingAddresses[index].Line1)
        </div>

        <div class="row">
        <div class="form-group col-md-4">
        @Html.LabelFor(model => model.ShippingAddresses[index].PostalCode)
        @Html.TextBoxFor(model => model.ShippingAddresses[index].PostalCode, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ShippingAddresses[index].PostalCode)
        </div>

        <div class="form-group col-md-8">
        @Html.LabelFor(model => model.ShippingAddresses[index].City)
        @Html.TextBoxFor(model => model.ShippingAddresses[index].City, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ShippingAddresses[index].City)
        </div>
        </div>

        @Html.EditorFor(model => model.ShippingAddresses[index].CountryRegion, Model.ShippingAddresses[index].CountryRegion)

        <div class="form-group">
            @Html.LabelFor(model => model.ShippingAddresses[index].CountryName)
            @Html.DropDownListFor(model => model.ShippingAddresses[index].CountryCode, new SelectList(Model.ShippingAddresses[index].CountryOptions, "Code", "Name", Model.ShippingAddresses[index].CountryCode), new { @class = "form-control jsChangeCountry" })
            @Html.ValidationMessageFor(model => model.ShippingAddresses[index].CountryCode)
            @Html.Hidden("address-htmlfieldprefix", String.Format("ShippingAddresses[{0}].CountryRegion", index))
        </div>

        @if (Request.RequestContext.HttpContext.User.Identity.IsAuthenticated)
        {
            <div class="checkbox">
            <label>
            @Html.CheckBoxFor(model => model.ShippingAddresses[index].SaveAddress, new { @type = "checkbox" }) @Html.Translate("/Checkout/Address/Labels/SaveAddress")
            </label>
            </div>
        }

        </div>
        </div>
        <div class="col-md-6 col-sm-12">
        <h3>@Html.Translate("/Checkout/Shipment/Labels/ChooseDelivery")</h3>
        @foreach (var shippingMethodViewModel in Model.ShippingMethodViewModels ?? Enumerable.Empty<ShippingMethodViewModel>())
        {
            <div class="radio">
            <label>
            @Html.RadioButtonFor(model => model.ShippingAddresses[index].ShippingMethodId, shippingMethodViewModel.Id, new { @id = shippingMethodViewModel.Id, @class = "jsChangeShipment" })
            @shippingMethodViewModel.DisplayName
            @shippingMethodViewModel.Price.ToString()
            </label>
            </div>
        }
        </div>
        </div>
        </div>
            }
    </div>